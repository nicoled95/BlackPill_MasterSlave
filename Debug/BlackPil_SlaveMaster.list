
BlackPil_SlaveMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a0  080028a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028a8  080028a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080028b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000090  08002940  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002940  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006655  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001444  00000000  00000000  00026715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  00027b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000590  00000000  00000000  000281a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b51  00000000  00000000  00028738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007653  00000000  00000000  0003d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080f8d  00000000  00000000  000448dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017cc  00000000  00000000  000c58bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002878 	.word	0x08002878

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08002878 	.word	0x08002878

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b42      	ldr	r3, [pc, #264]	; (8000600 <MX_GPIO_Init+0x124>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a41      	ldr	r2, [pc, #260]	; (8000600 <MX_GPIO_Init+0x124>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <MX_GPIO_Init+0x124>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <MX_GPIO_Init+0x124>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a3a      	ldr	r2, [pc, #232]	; (8000600 <MX_GPIO_Init+0x124>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b38      	ldr	r3, [pc, #224]	; (8000600 <MX_GPIO_Init+0x124>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b34      	ldr	r3, [pc, #208]	; (8000600 <MX_GPIO_Init+0x124>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a33      	ldr	r2, [pc, #204]	; (8000600 <MX_GPIO_Init+0x124>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <MX_GPIO_Init+0x124>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_pin13_GPIO_Port, LED_pin13_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	482d      	ldr	r0, [pc, #180]	; (8000604 <MX_GPIO_Init+0x128>)
 800054e:	f000 ff81 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	482b      	ldr	r0, [pc, #172]	; (8000608 <MX_GPIO_Init+0x12c>)
 800055a:	f000 ff7b 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_B2_Pin|ENABLE_B1_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000564:	4828      	ldr	r0, [pc, #160]	; (8000608 <MX_GPIO_Init+0x12c>)
 8000566:	f000 ff75 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_pin13_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_pin13_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <MX_GPIO_Init+0x128>)
 8000584:	f000 fde2 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000592:	2302      	movs	r3, #2
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	4819      	ldr	r0, [pc, #100]	; (8000608 <MX_GPIO_Init+0x12c>)
 80005a2:	f000 fdd3 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T1_Pin;
 80005a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4619      	mov	r1, r3
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <MX_GPIO_Init+0x130>)
 80005bc:	f000 fdc6 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T2_Pin;
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005c8:	2302      	movs	r3, #2
 80005ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T2_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_GPIO_Init+0x12c>)
 80005d4:	f000 fdba 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENABLE_B2_Pin|ENABLE_B1_Pin;
 80005d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0x12c>)
 80005f2:	f000 fdab 	bl	800114c <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020800 	.word	0x40020800
 8000608:	40020400 	.word	0x40020400
 800060c:	40020000 	.word	0x40020000

08000610 <Blocked1_6>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-------------------------------------------------------------*/
/******************Functions for the Patterns*******************/
/***************************************************************/
void Blocked1_6(){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/*This function blocks the channels on the electrodes from 1 to 6 in order.*/
	/*Stim- Stim+ CH2- CH2+ CH1- CH1+*/
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0); //selector of slave, active on LOW state
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <Blocked1_6+0x30>)
 800061c:	f000 ff1a 	bl	8001454 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi2, (uint8_t*)(block1_6),3, HAL_MAX_DELAY); //(SPI used , buffer, size of data, time of transmission)
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2203      	movs	r2, #3
 8000626:	4907      	ldr	r1, [pc, #28]	; (8000644 <Blocked1_6+0x34>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <Blocked1_6+0x38>)
 800062a:	f001 fbda 	bl	8001de2 <HAL_SPI_Transmit>
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <Blocked1_6+0x30>)
 8000636:	f000 ff0d 	bl	8001454 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020400 	.word	0x40020400
 8000644:	20000004 	.word	0x20000004
 8000648:	2000010c 	.word	0x2000010c

0800064c <Blocked6_1>:
void Blocked6_1(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	/*This function blocks the channels on the electrodes from 6 to 1 in order.*/
	/*CH1+ CH1- CH2+ CH2- Stim+ Stim-*/
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0); //selector of slave, active on LOW state
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <Blocked6_1+0x30>)
 8000658:	f000 fefc 	bl	8001454 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi2, (uint8_t*)(block6_1),3, HAL_MAX_DELAY); //(SPI used , buffer, size of data, time of transmission)
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2203      	movs	r2, #3
 8000662:	4907      	ldr	r1, [pc, #28]	; (8000680 <Blocked6_1+0x34>)
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <Blocked6_1+0x38>)
 8000666:	f001 fbbc 	bl	8001de2 <HAL_SPI_Transmit>
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <Blocked6_1+0x30>)
 8000672:	f000 feef 	bl	8001454 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400
 8000680:	20000008 	.word	0x20000008
 8000684:	2000010c 	.word	0x2000010c

08000688 <Odd_All_Chs>:
void Odd_All_Chs(){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	/*This function allows injecting two signals into any channels
	 *  by opening the electrodes in pairs:
	 *  1-3 || 3-5 || 5-7 || 7-9 || 9-11 || 11-13 || 13-15 || 15-1*/
	for (int i=0;i<=7;i++){
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	e01e      	b.n	80006d2 <Odd_All_Chs+0x4a>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);//selector of slave, active on LOW state
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <Odd_All_Chs+0x5c>)
 800069c:	f000 feda 	bl	8001454 <HAL_GPIO_WritePin>
		dato_tx[0] = allOdd[i];
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <Odd_All_Chs+0x60>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <Odd_All_Chs+0x64>)
 80006aa:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*)(dato_tx),1, HAL_MAX_DELAY); //(SPI used , buffer, size of data, time of transmission)
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	2201      	movs	r2, #1
 80006b2:	490e      	ldr	r1, [pc, #56]	; (80006ec <Odd_All_Chs+0x64>)
 80006b4:	480e      	ldr	r0, [pc, #56]	; (80006f0 <Odd_All_Chs+0x68>)
 80006b6:	f001 fb94 	bl	8001de2 <HAL_SPI_Transmit>
		HAL_Delay(200); //delay for being abble to see the signals. comment if you dont need it
 80006ba:	20c8      	movs	r0, #200	; 0xc8
 80006bc:	f000 fc3c 	bl	8000f38 <HAL_Delay>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <Odd_All_Chs+0x5c>)
 80006c8:	f000 fec4 	bl	8001454 <HAL_GPIO_WritePin>
	for (int i=0;i<=7;i++){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	dddd      	ble.n	8000694 <Odd_All_Chs+0xc>
	}}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	200000ac 	.word	0x200000ac
 80006f0:	2000010c 	.word	0x2000010c

080006f4 <Odd_CH1>:
void Odd_CH1(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	/*This function allows injecting two signals into CH1+ AND CH1-
		 *  by opening the electrodes in pairs:
		 *  1-3 || 3-5 || 5-7 || 7-9 || 9-11 || 11-13 || 13-15 || 15-1 .*/
	 for (int i=0;i<=8;i++){
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e02f      	b.n	8000760 <Odd_CH1+0x6c>
		 	 for (int j=0;j<=3;j++){
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	e026      	b.n	8000754 <Odd_CH1+0x60>
		 		 	 dato_tx[j] = odd_ch1[i][j];
 8000706:	491a      	ldr	r1, [pc, #104]	; (8000770 <Odd_CH1+0x7c>)
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	18ca      	adds	r2, r1, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	4413      	add	r3, r2
 8000716:	7819      	ldrb	r1, [r3, #0]
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <Odd_CH1+0x80>)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0); //selector of slave, active on LOW state
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000728:	4813      	ldr	r0, [pc, #76]	; (8000778 <Odd_CH1+0x84>)
 800072a:	f000 fe93 	bl	8001454 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi2, (uint8_t*)(dato_tx),3, HAL_MAX_DELAY); //(SPI used , buffer, size of data, time of transmission)
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	2203      	movs	r2, #3
 8000734:	490f      	ldr	r1, [pc, #60]	; (8000774 <Odd_CH1+0x80>)
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <Odd_CH1+0x88>)
 8000738:	f001 fb53 	bl	8001de2 <HAL_SPI_Transmit>
		 HAL_Delay(200);
 800073c:	20c8      	movs	r0, #200	; 0xc8
 800073e:	f000 fbfb 	bl	8000f38 <HAL_Delay>
		 HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <Odd_CH1+0x84>)
 800074a:	f000 fe83 	bl	8001454 <HAL_GPIO_WritePin>
		 	 for (int j=0;j<=3;j++){
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b03      	cmp	r3, #3
 8000758:	ddd5      	ble.n	8000706 <Odd_CH1+0x12>
	 for (int i=0;i<=8;i++){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3301      	adds	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b08      	cmp	r3, #8
 8000764:	ddcc      	ble.n	8000700 <Odd_CH1+0xc>
	}		}}
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000014 	.word	0x20000014
 8000774:	200000ac 	.word	0x200000ac
 8000778:	40020400 	.word	0x40020400
 800077c:	2000010c 	.word	0x2000010c

08000780 <Even_Stim>:
void Even_Stim(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	/*This function allows injecting two signals into Stim+ AND Stim-
		 *  by opening the electrodes in pairs:
		 *  2-4 || 4-6 || 6-8 || 8-10 || 10-12 || 12-14 || 14-16 || 16-2 .*/
	 for (int i=0;i<=8;i++){
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e02f      	b.n	80007ec <Even_Stim+0x6c>
		 	 for (int j=0;j<=3;j++){
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	e026      	b.n	80007e0 <Even_Stim+0x60>
		 		 	 dato_tx[j] = stim_even[i][j];
 8000792:	491a      	ldr	r1, [pc, #104]	; (80007fc <Even_Stim+0x7c>)
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	18ca      	adds	r2, r1, r3
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	4413      	add	r3, r2
 80007a2:	7819      	ldrb	r1, [r3, #0]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <Even_Stim+0x80>)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	460a      	mov	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);//selector of slave, active on LOW state
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <Even_Stim+0x84>)
 80007b6:	f000 fe4d 	bl	8001454 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t*)(dato_tx),3, HAL_MAX_DELAY); //(SPI used , buffer, size o data, time of transmission)
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	2203      	movs	r2, #3
 80007c0:	490f      	ldr	r1, [pc, #60]	; (8000800 <Even_Stim+0x80>)
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <Even_Stim+0x88>)
 80007c4:	f001 fb0d 	bl	8001de2 <HAL_SPI_Transmit>
		HAL_Delay(200);
 80007c8:	20c8      	movs	r0, #200	; 0xc8
 80007ca:	f000 fbb5 	bl	8000f38 <HAL_Delay>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <Even_Stim+0x84>)
 80007d6:	f000 fe3d 	bl	8001454 <HAL_GPIO_WritePin>
		 	 for (int j=0;j<=3;j++){
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	ddd5      	ble.n	8000792 <Even_Stim+0x12>
	 for (int i=0;i<=8;i++){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b08      	cmp	r3, #8
 80007f0:	ddcc      	ble.n	800078c <Even_Stim+0xc>
	}	}}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	200000ac 	.word	0x200000ac
 8000804:	40020400 	.word	0x40020400
 8000808:	2000010c 	.word	0x2000010c

0800080c <Rising>:
void  Rising(){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	/*This function enables the electrodes in order, from 1 to 16,
	with any channel.*/
	for (int i=0;i<=15;i++){ //Display from 1 to 16
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	e01f      	b.n	8000858 <Rising+0x4c>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0); //selector of slave, active on LOW state
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <Rising+0x5c>)
 8000820:	f000 fe18 	bl	8001454 <HAL_GPIO_WritePin>
		dato_tx[0] = from1to16ch1[i];
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <Rising+0x60>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <Rising+0x64>)
 8000830:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*)(dato_tx),1, HAL_MAX_DELAY); //(SPI used , buffer, size o data, time of transmission)
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	490d      	ldr	r1, [pc, #52]	; (8000870 <Rising+0x64>)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <Rising+0x68>)
 800083c:	f001 fad1 	bl	8001de2 <HAL_SPI_Transmit>
		HAL_Delay(200);
 8000840:	20c8      	movs	r0, #200	; 0xc8
 8000842:	f000 fb79 	bl	8000f38 <HAL_Delay>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <Rising+0x5c>)
 800084e:	f000 fe01 	bl	8001454 <HAL_GPIO_WritePin>
	for (int i=0;i<=15;i++){ //Display from 1 to 16
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	dddc      	ble.n	8000818 <Rising+0xc>
	}	}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40020400 	.word	0x40020400
 800086c:	20000044 	.word	0x20000044
 8000870:	200000ac 	.word	0x200000ac
 8000874:	2000010c 	.word	0x2000010c

08000878 <Falling>:
void Falling(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	/*This function enables the electrodes in order, from 16 to 1,
	with any channel.*/
	for (int i=0;i<=15;i++){ //Display from 0 to 16
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e01f      	b.n	80008c4 <Falling+0x4c>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);//selector of slave, active on LOW state
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <Falling+0x5c>)
 800088c:	f000 fde2 	bl	8001454 <HAL_GPIO_WritePin>
		dato_tx[0] = from16to1ch1[i];
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <Falling+0x60>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <Falling+0x64>)
 800089c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*)(dato_tx),1, HAL_MAX_DELAY); //(SPI used , buffer, size o data, time of transmission)
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	2201      	movs	r2, #1
 80008a4:	490d      	ldr	r1, [pc, #52]	; (80008dc <Falling+0x64>)
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <Falling+0x68>)
 80008a8:	f001 fa9b 	bl	8001de2 <HAL_SPI_Transmit>
		HAL_Delay(200);
 80008ac:	20c8      	movs	r0, #200	; 0xc8
 80008ae:	f000 fb43 	bl	8000f38 <HAL_Delay>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1); // disable the slave with a HIGH state
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <Falling+0x5c>)
 80008ba:	f000 fdcb 	bl	8001454 <HAL_GPIO_WritePin>
	for (int i=0;i<=15;i++){ //Display from 0 to 16
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	dddc      	ble.n	8000884 <Falling+0xc>
	}	}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40020400 	.word	0x40020400
 80008d8:	20000064 	.word	0x20000064
 80008dc:	200000ac 	.word	0x200000ac
 80008e0:	2000010c 	.word	0x2000010c

080008e4 <main>:
/* USER CODE END 0 */

/** MAIN FUNCTION*********************************************************************************************************************
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fab3 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f8cf 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fdf3 	bl	80004dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80008f6:	f000 f939 	bl	8000b6c <MX_SPI1_Init>
  MX_SPI2_Init();
 80008fa:	f000 f969 	bl	8000bd0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  	  	  HAL_GPIO_WritePin(GPIOC, LED_pin13_Pin,GPIO_PIN_SET); //LED Incorporated
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	485d      	ldr	r0, [pc, #372]	; (8000a7c <main+0x198>)
 8000906:	f000 fda5 	bl	8001454 <HAL_GPIO_WritePin>
  	  	  HAL_GPIO_WritePin(GPIOC, ENABLE_B1_Pin,GPIO_PIN_RESET);//set ENABLE B1
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000910:	485a      	ldr	r0, [pc, #360]	; (8000a7c <main+0x198>)
 8000912:	f000 fd9f 	bl	8001454 <HAL_GPIO_WritePin>
  	  	  HAL_GPIO_WritePin(GPIOC, ENABLE_B2_Pin,GPIO_PIN_RESET);//set ENABLE B2
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091c:	4857      	ldr	r0, [pc, #348]	; (8000a7c <main+0x198>)
 800091e:	f000 fd99 	bl	8001454 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, ENABLE_B1_Pin,GPIO_PIN_SET);//ENABLE B1 ON
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000928:	4854      	ldr	r0, [pc, #336]	; (8000a7c <main+0x198>)
 800092a:	f000 fd93 	bl	8001454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, ENABLE_B2_Pin,GPIO_PIN_SET);//ENABLE B2 ON
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	4851      	ldr	r0, [pc, #324]	; (8000a7c <main+0x198>)
 8000936:	f000 fd8d 	bl	8001454 <HAL_GPIO_WritePin>

	stado = HAL_SPI_Receive(&hspi1,dato_rx, 1, HAL_MAX_DELAY);//Control variable
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2201      	movs	r2, #1
 8000940:	494f      	ldr	r1, [pc, #316]	; (8000a80 <main+0x19c>)
 8000942:	4850      	ldr	r0, [pc, #320]	; (8000a84 <main+0x1a0>)
 8000944:	f001 fb89 	bl	800205a <HAL_SPI_Receive>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b4e      	ldr	r3, [pc, #312]	; (8000a88 <main+0x1a4>)
 800094e:	701a      	strb	r2, [r3, #0]
		if(stado == HAL_OK){//if the data is well received
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <main+0x1a4>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	f040 8086 	bne.w	8000a66 <main+0x182>
			 HAL_GPIO_WritePin(GPIOC, LED_pin13_Pin,GPIO_PIN_RESET);//LED BLUE BLACKPILL ON
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	4846      	ldr	r0, [pc, #280]	; (8000a7c <main+0x198>)
 8000962:	f000 fd77 	bl	8001454 <HAL_GPIO_WritePin>
			switch (dato_rx[0]){ // Analysis of the command received from the master.
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <main+0x19c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	2b06      	cmp	r3, #6
 800096e:	d87c      	bhi.n	8000a6a <main+0x186>
 8000970:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <main+0x94>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	08000995 	.word	0x08000995
 800097c:	080009b3 	.word	0x080009b3
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009ef 	.word	0x080009ef
 8000988:	08000a0d 	.word	0x08000a0d
 800098c:	08000a2b 	.word	0x08000a2b
 8000990:	08000a49 	.word	0x08000a49
			   case 0x01:
				   for (int i = 0; i < repetitions ; i++) {
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	e004      	b.n	80009a4 <main+0xc0>
					   Blocked1_6(); }
 800099a:	f7ff fe39 	bl	8000610 <Blocked1_6>
				   for (int i = 0; i < repetitions ; i++) {
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <main+0x1a8>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dbf4      	blt.n	800099a <main+0xb6>
					/*This function blocks the channels on the electrodes from 1 to 6 in order.*/
					/*Stim- Stim+ CH2- CH2+ CH1- CH1+*/
				   break;
 80009b0:	e05c      	b.n	8000a6c <main+0x188>
			   case 0x02:
				   for (int i = 0; i < repetitions ; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	e004      	b.n	80009c2 <main+0xde>
					   Blocked6_1(); }
 80009b8:	f7ff fe48 	bl	800064c <Blocked6_1>
				   for (int i = 0; i < repetitions ; i++) {
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <main+0x1a8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	dbf4      	blt.n	80009b8 <main+0xd4>
					/*This function blocks the channels on the electrodes from 6 to 1 in order.*/
					/*CH1+ CH1- CH2+ CH2- Stim+ Stim-*/
					break;
 80009ce:	e04d      	b.n	8000a6c <main+0x188>
			   case 0x03:
				   for (int i = 0; i < repetitions ; i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e004      	b.n	80009e0 <main+0xfc>
					   Odd_All_Chs() ; }
 80009d6:	f7ff fe57 	bl	8000688 <Odd_All_Chs>
				   for (int i = 0; i < repetitions ; i++) {
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <main+0x1a8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	dbf4      	blt.n	80009d6 <main+0xf2>
					/*This function allows injecting two signals into any channels
					 *  by opening the electrodes in pairs:
					 *  1-3 || 3-5 || 5-7 || 7-9 || 9-11 || 11-13 || 13-15 || 15-1*/
					break;
 80009ec:	e03e      	b.n	8000a6c <main+0x188>
			   case 0x04:
				   for (int i = 0; i < repetitions ; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	e004      	b.n	80009fe <main+0x11a>
					   Odd_CH1(); }
 80009f4:	f7ff fe7e 	bl	80006f4 <Odd_CH1>
				   for (int i = 0; i < repetitions ; i++) {
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	3301      	adds	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <main+0x1a8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4293      	cmp	r3, r2
 8000a08:	dbf4      	blt.n	80009f4 <main+0x110>
					/*This function allows injecting two signals into CH1+ AND CH1-
						 *  by opening the electrodes in pairs:
						 *  1-3 || 3-5 || 5-7 || 7-9 || 9-11 || 11-13 || 13-15 || 15-1 .*/
					break;
 8000a0a:	e02f      	b.n	8000a6c <main+0x188>
			   case 0x05:
				   for (int i = 0; i < repetitions ; i++) {
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e004      	b.n	8000a1c <main+0x138>
					   Even_Stim(); }
 8000a12:	f7ff feb5 	bl	8000780 <Even_Stim>
				   for (int i = 0; i < repetitions ; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <main+0x1a8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	dbf4      	blt.n	8000a12 <main+0x12e>
					/*This function allows injecting two signals into Stim+ AND Stim-
						 *  by opening the electrodes in pairs:
						 *  2-4 || 4-6 || 6-8 || 8-10 || 10-12 || 12-14 || 14-16 || 16-2 .*/
					break;
 8000a28:	e020      	b.n	8000a6c <main+0x188>
			   case 0x06:
				   for (int i = 0; i < repetitions ; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	e004      	b.n	8000a3a <main+0x156>
				  Rising(); }
 8000a30:	f7ff feec 	bl	800080c <Rising>
				   for (int i = 0; i < repetitions ; i++) {
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <main+0x1a8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	dbf4      	blt.n	8000a30 <main+0x14c>
					/*This function enables the electrodes in order, from 1 to 16,
					with any channel.*/
					break;
 8000a46:	e011      	b.n	8000a6c <main+0x188>
			   case 0x07:
				   for (int i = 0; i < repetitions ; i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	e004      	b.n	8000a58 <main+0x174>
			      Falling(); }
 8000a4e:	f7ff ff13 	bl	8000878 <Falling>
				   for (int i = 0; i < repetitions ; i++) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <main+0x1a8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4293      	cmp	r3, r2
 8000a62:	dbf4      	blt.n	8000a4e <main+0x16a>
					/*This function enables the electrodes in order, from 16 to 1,
					with any channel.*/
					break;
 8000a64:	e002      	b.n	8000a6c <main+0x188>

			   default : //default block
				  break;
			}
		}
 8000a66:	bf00      	nop
 8000a68:	e000      	b.n	8000a6c <main+0x188>
				  break;
 8000a6a:	bf00      	nop

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOC, LED_pin13_Pin,GPIO_PIN_SET);//LED BLUE BLACKPILL OFF
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <main+0x198>)
 8000a74:	f000 fcee 	bl	8001454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, ENABLE_B1_Pin,GPIO_PIN_SET);//ENABLE B1 ON
 8000a78:	e753      	b.n	8000922 <main+0x3e>
 8000a7a:	bf00      	nop
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	200000b0 	.word	0x200000b0
 8000a84:	200000b4 	.word	0x200000b4
 8000a88:	200000b1 	.word	0x200000b1
 8000a8c:	20000000 	.word	0x20000000

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fee2 	bl	8002868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SystemClock_Config+0xc8>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <SystemClock_Config+0xc8>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <SystemClock_Config+0xc8>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <SystemClock_Config+0xcc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <SystemClock_Config+0xcc>)
 8000ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <SystemClock_Config+0xcc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2310      	movs	r3, #16
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b04:	2348      	movs	r3, #72	; 0x48
 8000b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 0320 	add.w	r3, r7, #32
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fcb7 	bl	8001488 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b20:	f000 f81e 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 ff19 	bl	8001978 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b4c:	f000 f808 	bl	8000b60 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <MX_SPI1_Init+0x60>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000bae:	220a      	movs	r2, #10
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_SPI1_Init+0x5c>)
 8000bb4:	f001 f88c 	bl	8001cd0 <HAL_SPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000bbe:	f7ff ffcf 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000b4 	.word	0x200000b4
 8000bcc:	40013000 	.word	0x40013000

08000bd0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_SPI2_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI2_Init+0x64>)
 8000c22:	f001 f855 	bl	8001cd0 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f7ff ff98 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000010c 	.word	0x2000010c
 8000c38:	40003800 	.word	0x40003800

08000c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <HAL_SPI_MspInit+0xe8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23f0      	movs	r3, #240	; 0xf0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <HAL_SPI_MspInit+0xf0>)
 8000cb2:	f000 fa4b 	bl	800114c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cb6:	e031      	b.n	8000d1c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_SPI_MspInit+0xf4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12c      	bne.n	8000d1c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_SPI_MspInit+0xec>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000cfa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_SPI_MspInit+0xf8>)
 8000d18:	f000 fa18 	bl	800114c <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40003800 	.word	0x40003800
 8000d34:	40020400 	.word	0x40020400

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f890 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f001 fcf7 	bl	8002820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fd57 	bl	80008e4 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e44:	080028b0 	.word	0x080028b0
  ldr r2, =_sbss
 8000e48:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e4c:	20000168 	.word	0x20000168

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f931 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff ff56 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f93b 	bl	8001132 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f911 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000084 	.word	0x20000084
 8000ef0:	2000008c 	.word	0x2000008c
 8000ef4:	20000088 	.word	0x20000088

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000008c 	.word	0x2000008c
 8000f1c:	20000164 	.word	0x20000164

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000164 	.word	0x20000164

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff47 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff5c 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffb0 	bl	80010a0 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e159      	b.n	800141c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8148 	bne.w	8001416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a2 	beq.w	8001416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b57      	ldr	r3, [pc, #348]	; (8001434 <HAL_GPIO_Init+0x2e8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_GPIO_Init+0x2e8>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x2e8>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x2ec>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a49      	ldr	r2, [pc, #292]	; (800143c <HAL_GPIO_Init+0x2f0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x202>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a48      	ldr	r2, [pc, #288]	; (8001440 <HAL_GPIO_Init+0x2f4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x1fe>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a47      	ldr	r2, [pc, #284]	; (8001444 <HAL_GPIO_Init+0x2f8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x1fa>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a46      	ldr	r2, [pc, #280]	; (8001448 <HAL_GPIO_Init+0x2fc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x1f6>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <HAL_GPIO_Init+0x300>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x1f2>
 800133a:	2304      	movs	r3, #4
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x204>
 800133e:	2307      	movs	r3, #7
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x204>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x204>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x204>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x204>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x2ec>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_GPIO_Init+0x304>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x304>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_GPIO_Init+0x304>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a24      	ldr	r2, [pc, #144]	; (8001450 <HAL_GPIO_Init+0x304>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x304>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x304>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_GPIO_Init+0x304>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_GPIO_Init+0x304>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f aea2 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e267      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d075      	beq.n	8001592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d00c      	beq.n	80014cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d112      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ca:	d10b      	bne.n	80014e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05b      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d157      	bne.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e242      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x74>
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a75      	ldr	r2, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x98>
 8001506:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6f      	ldr	r2, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6c      	ldr	r2, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xb0>
 8001520:	4b69      	ldr	r3, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a68      	ldr	r2, [pc, #416]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b66      	ldr	r3, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fcee 	bl	8000f20 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fcea 	bl	8000f20 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e207      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xc0>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fcda 	bl	8000f20 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fcd6 	bl	8000f20 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1f3      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c7      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fc8f 	bl	8000f20 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fc8b 	bl	8000f20 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a8      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x244>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fc6e 	bl	8000f20 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fc6a 	bl	8000f20 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e187      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d036      	beq.n	80016e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d016      	beq.n	80016a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fc4e 	bl	8000f20 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fc4a 	bl	8000f20 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e167      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_OscConfig+0x240>)
 800169c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x200>
 80016a6:	e01b      	b.n	80016e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x248>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fc37 	bl	8000f20 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	e00e      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fc33 	bl	8000f20 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d907      	bls.n	80016d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e150      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80016c8:	40023800 	.word	0x40023800
 80016cc:	42470000 	.word	0x42470000
 80016d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ea      	bne.n	80016b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8097 	beq.w	800181c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b77      	ldr	r3, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a73      	ldr	r2, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff fbf3 	bl	8000f20 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff fbef 	bl	8000f20 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e10c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x474>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x2ea>
 8001764:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a63      	ldr	r2, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x30c>
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a5e      	ldr	r2, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x324>
 8001794:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fbb4 	bl	8000f20 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fbb0 	bl	8000f20 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0cb      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ee      	beq.n	80017bc <HAL_RCC_OscConfig+0x334>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb9e 	bl	8000f20 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb9a 	bl	8000f20 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0b5      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a1 	beq.w	8001968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d05c      	beq.n	80018ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d141      	bne.n	80018be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fb6e 	bl	8000f20 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fb6a 	bl	8000f20 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e087      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	3b01      	subs	r3, #1
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	491b      	ldr	r1, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb43 	bl	8000f20 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb3f 	bl	8000f20 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e05c      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x416>
 80018bc:	e054      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x478>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb2c 	bl	8000f20 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff fb28 	bl	8000f20 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e045      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x444>
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e038      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
 8001900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x4ec>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d028      	beq.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d121      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d11a      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193c:	4293      	cmp	r3, r2
 800193e:	d111      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d90c      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d044      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d119      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e067      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff fa5a 	bl	8000f20 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff fa56 	bl	8000f20 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d20c      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f9ba 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08002890 	.word	0x08002890
 8001b3c:	20000084 	.word	0x20000084
 8001b40:	20000088 	.word	0x20000088

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b48:	b090      	sub	sp, #64	; 0x40
 8001b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b50:	2300      	movs	r3, #0
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d00d      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x40>
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	f200 80a1 	bhi.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b76:	e09b      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b7c:	e09b      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b82:	e098      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d028      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bac:	2100      	movs	r1, #0
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb0:	fb03 f201 	mul.w	r2, r3, r1
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	fb00 f303 	mul.w	r3, r0, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a43      	ldr	r2, [pc, #268]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bca:	4413      	add	r3, r2
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	61fa      	str	r2, [r7, #28]
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bde:	f7fe fafb 	bl	80001d8 <__aeabi_uldivmod>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4613      	mov	r3, r2
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bea:	e053      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	617a      	str	r2, [r7, #20]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bfe:	f04f 0b00 	mov.w	fp, #0
 8001c02:	4652      	mov	r2, sl
 8001c04:	465b      	mov	r3, fp
 8001c06:	f04f 0000 	mov.w	r0, #0
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	0159      	lsls	r1, r3, #5
 8001c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c14:	0150      	lsls	r0, r2, #5
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c1e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c36:	ebb2 0408 	subs.w	r4, r2, r8
 8001c3a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	00eb      	lsls	r3, r5, #3
 8001c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4c:	00e2      	lsls	r2, r4, #3
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
 8001c52:	eb14 030a 	adds.w	r3, r4, sl
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	eb45 030b 	adc.w	r3, r5, fp
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	028b      	lsls	r3, r1, #10
 8001c6e:	4621      	mov	r1, r4
 8001c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c74:	4621      	mov	r1, r4
 8001c76:	028a      	lsls	r2, r1, #10
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c88:	f7fe faa6 	bl	80001d8 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3740      	adds	r7, #64	; 0x40
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	017d7840 	.word	0x017d7840

08001cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07b      	b.n	8001dda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cf2:	d009      	beq.n	8001d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
 8001cfa:	e005      	b.n	8001d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe ff8a 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	ea42 0103 	orr.w	r1, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0104 	and.w	r1, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f003 0210 	and.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_SPI_Transmit+0x22>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e126      	b.n	8002052 <HAL_SPI_Transmit+0x270>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e0c:	f7ff f888 	bl	8000f20 <HAL_GetTick>
 8001e10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d002      	beq.n	8001e28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e26:	e10b      	b.n	8002040 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_SPI_Transmit+0x52>
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e38:	e102      	b.n	8002040 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e80:	d10f      	bne.n	8001ea2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d007      	beq.n	8001ec0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec8:	d14b      	bne.n	8001f62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_SPI_Transmit+0xf6>
 8001ed2:	8afb      	ldrh	r3, [r7, #22]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d13e      	bne.n	8001f56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	1c9a      	adds	r2, r3, #2
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001efc:	e02b      	b.n	8001f56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d112      	bne.n	8001f32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	1c9a      	adds	r2, r3, #2
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f30:	e011      	b.n	8001f56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f32:	f7fe fff5 	bl	8000f20 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d803      	bhi.n	8001f4a <HAL_SPI_Transmit+0x168>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d102      	bne.n	8001f50 <HAL_SPI_Transmit+0x16e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f54:	e074      	b.n	8002040 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ce      	bne.n	8001efe <HAL_SPI_Transmit+0x11c>
 8001f60:	e04c      	b.n	8001ffc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_SPI_Transmit+0x18e>
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d140      	bne.n	8001ff2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f96:	e02c      	b.n	8001ff2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d113      	bne.n	8001fce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fcc:	e011      	b.n	8001ff2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fce:	f7fe ffa7 	bl	8000f20 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d803      	bhi.n	8001fe6 <HAL_SPI_Transmit+0x204>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d102      	bne.n	8001fec <HAL_SPI_Transmit+0x20a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ff0:	e026      	b.n	8002040 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1cd      	bne.n	8001f98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fbcb 	bl	800279c <SPI_EndRxTxTransaction>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
 800203c:	e000      	b.n	8002040 <HAL_SPI_Transmit+0x25e>
  }

error:
 800203e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002050:	7ffb      	ldrb	r3, [r7, #31]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b088      	sub	sp, #32
 800205e:	af02      	add	r7, sp, #8
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002076:	d112      	bne.n	800209e <HAL_SPI_Receive+0x44>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10e      	bne.n	800209e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2204      	movs	r2, #4
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f8f1 	bl	800227c <HAL_SPI_TransmitReceive>
 800209a:	4603      	mov	r3, r0
 800209c:	e0ea      	b.n	8002274 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_SPI_Receive+0x52>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e0e3      	b.n	8002274 <HAL_SPI_Receive+0x21a>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b4:	f7fe ff34 	bl	8000f20 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020ca:	e0ca      	b.n	8002262 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Receive+0x7e>
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020dc:	e0c1      	b.n	8002262 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2204      	movs	r2, #4
 80020e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002124:	d10f      	bne.n	8002146 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002134:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d007      	beq.n	8002164 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d162      	bne.n	8002232 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800216c:	e02e      	b.n	80021cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f103 020c 	add.w	r2, r3, #12
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021a6:	e011      	b.n	80021cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a8:	f7fe feba 	bl	8000f20 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d803      	bhi.n	80021c0 <HAL_SPI_Receive+0x166>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d102      	bne.n	80021c6 <HAL_SPI_Receive+0x16c>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021ca:	e04a      	b.n	8002262 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1cb      	bne.n	800216e <HAL_SPI_Receive+0x114>
 80021d6:	e031      	b.n	800223c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d113      	bne.n	800220e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	b292      	uxth	r2, r2
 80021f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	1c9a      	adds	r2, r3, #2
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800220c:	e011      	b.n	8002232 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800220e:	f7fe fe87 	bl	8000f20 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d803      	bhi.n	8002226 <HAL_SPI_Receive+0x1cc>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d102      	bne.n	800222c <HAL_SPI_Receive+0x1d2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002230:	e017      	b.n	8002262 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1cd      	bne.n	80021d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fa45 	bl	80026d0 <SPI_EndRxTransaction>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
 800225e:	e000      	b.n	8002262 <HAL_SPI_Receive+0x208>
  }

error :
 8002260:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800228a:	2301      	movs	r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x26>
 800229e:	2302      	movs	r3, #2
 80022a0:	e18a      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x33c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022aa:	f7fe fe39 	bl	8000f20 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d00f      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x70>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d2:	d107      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <HAL_SPI_TransmitReceive+0x68>
 80022dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d003      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022ea:	e15b      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x82>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x82>
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002304:	e14e      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b04      	cmp	r3, #4
 8002310:	d003      	beq.n	800231a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	887a      	ldrh	r2, [r7, #2]
 8002342:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d007      	beq.n	800236e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002376:	d178      	bne.n	800246a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_SPI_TransmitReceive+0x10a>
 8002380:	8b7b      	ldrh	r3, [r7, #26]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d166      	bne.n	8002454 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	1c9a      	adds	r2, r3, #2
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023aa:	e053      	b.n	8002454 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d11b      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x176>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d016      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x176>
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d113      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	881a      	ldrh	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	1c9a      	adds	r2, r3, #2
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d119      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x1b8>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d014      	beq.n	8002434 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	b292      	uxth	r2, r2
 8002416:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	1c9a      	adds	r2, r3, #2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002434:	f7fe fd74 	bl	8000f20 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002440:	429a      	cmp	r2, r3
 8002442:	d807      	bhi.n	8002454 <HAL_SPI_TransmitReceive+0x1d8>
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d003      	beq.n	8002454 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002452:	e0a7      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1a6      	bne.n	80023ac <HAL_SPI_TransmitReceive+0x130>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1a1      	bne.n	80023ac <HAL_SPI_TransmitReceive+0x130>
 8002468:	e07c      	b.n	8002564 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x1fc>
 8002472:	8b7b      	ldrh	r3, [r7, #26]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d16b      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800249e:	e057      	b.n	8002550 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d11c      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x26c>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0x26c>
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d114      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d119      	bne.n	800252a <HAL_SPI_TransmitReceive+0x2ae>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d014      	beq.n	800252a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002526:	2301      	movs	r3, #1
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800252a:	f7fe fcf9 	bl	8000f20 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <HAL_SPI_TransmitReceive+0x2c6>
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d102      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x2cc>
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800254e:	e029      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1a2      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x224>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d19d      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f917 	bl	800279c <SPI_EndRxTxTransaction>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002580:	e010      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	e000      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3730      	adds	r7, #48	; 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025d0:	f7fe fca6 	bl	8000f20 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025e0:	f7fe fc9e 	bl	8000f20 <HAL_GetTick>
 80025e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	0d1b      	lsrs	r3, r3, #20
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025f6:	e054      	b.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d050      	beq.n	80026a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002600:	f7fe fc8e 	bl	8000f20 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	d902      	bls.n	8002616 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d13d      	bne.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262e:	d111      	bne.n	8002654 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002638:	d004      	beq.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002642:	d107      	bne.n	8002654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265c:	d10f      	bne.n	800267e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800267c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e017      	b.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3b01      	subs	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d19b      	bne.n	80025f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000084 	.word	0x20000084

080026d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e4:	d111      	bne.n	800270a <SPI_EndRxTransaction+0x3a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d004      	beq.n	80026fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d107      	bne.n	800270a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002712:	d12a      	bne.n	800276a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d012      	beq.n	8002744 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff ff49 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02d      	beq.n	8002790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e026      	b.n	8002792 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	2101      	movs	r1, #1
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff ff36 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01a      	beq.n	8002790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e013      	b.n	8002792 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff ff23 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e000      	b.n	8002792 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <SPI_EndRxTxTransaction+0x7c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1b      	ldr	r2, [pc, #108]	; (800281c <SPI_EndRxTxTransaction+0x80>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0d5b      	lsrs	r3, r3, #21
 80027b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d112      	bne.n	80027ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2200      	movs	r2, #0
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff fef4 	bl	80025c0 <SPI_WaitFlagStateUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e00f      	b.n	800280e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d0f2      	beq.n	80027ee <SPI_EndRxTxTransaction+0x52>
 8002808:	e000      	b.n	800280c <SPI_EndRxTxTransaction+0x70>
        break;
 800280a:	bf00      	nop
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000084 	.word	0x20000084
 800281c:	165e9f81 	.word	0x165e9f81

08002820 <__libc_init_array>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	4d0d      	ldr	r5, [pc, #52]	; (8002858 <__libc_init_array+0x38>)
 8002824:	4c0d      	ldr	r4, [pc, #52]	; (800285c <__libc_init_array+0x3c>)
 8002826:	1b64      	subs	r4, r4, r5
 8002828:	10a4      	asrs	r4, r4, #2
 800282a:	2600      	movs	r6, #0
 800282c:	42a6      	cmp	r6, r4
 800282e:	d109      	bne.n	8002844 <__libc_init_array+0x24>
 8002830:	4d0b      	ldr	r5, [pc, #44]	; (8002860 <__libc_init_array+0x40>)
 8002832:	4c0c      	ldr	r4, [pc, #48]	; (8002864 <__libc_init_array+0x44>)
 8002834:	f000 f820 	bl	8002878 <_init>
 8002838:	1b64      	subs	r4, r4, r5
 800283a:	10a4      	asrs	r4, r4, #2
 800283c:	2600      	movs	r6, #0
 800283e:	42a6      	cmp	r6, r4
 8002840:	d105      	bne.n	800284e <__libc_init_array+0x2e>
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	f855 3b04 	ldr.w	r3, [r5], #4
 8002848:	4798      	blx	r3
 800284a:	3601      	adds	r6, #1
 800284c:	e7ee      	b.n	800282c <__libc_init_array+0xc>
 800284e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002852:	4798      	blx	r3
 8002854:	3601      	adds	r6, #1
 8002856:	e7f2      	b.n	800283e <__libc_init_array+0x1e>
 8002858:	080028a8 	.word	0x080028a8
 800285c:	080028a8 	.word	0x080028a8
 8002860:	080028a8 	.word	0x080028a8
 8002864:	080028ac 	.word	0x080028ac

08002868 <memset>:
 8002868:	4402      	add	r2, r0
 800286a:	4603      	mov	r3, r0
 800286c:	4293      	cmp	r3, r2
 800286e:	d100      	bne.n	8002872 <memset+0xa>
 8002870:	4770      	bx	lr
 8002872:	f803 1b01 	strb.w	r1, [r3], #1
 8002876:	e7f9      	b.n	800286c <memset+0x4>

08002878 <_init>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr

08002884 <_fini>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	bf00      	nop
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr
